
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dipm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('dipm')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dipm")
> ### * dipm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dipm
> ### Title: Depth Importance in Precision Medicine (DIPM)
> ### Aliases: dipm
> 
> ### ** Examples
> 
> 
> #
> # ... an example with a continuous outcome variable
> #     and two treatment groups
> #
> 
> N = 100
> set.seed(123)
> 
>
> # generate binary treatments
> treatment = rbinom(N, 1, 0.5)
> 
> # generate candidate split variables
> X1 = rnorm(n = N, mean = 0, sd = 1)
> X2 = rnorm(n = N, mean = 0, sd = 1)
> X3 = rnorm(n = N, mean = 0, sd = 1)
> X4 = rnorm(n = N, mean = 0, sd = 1)
> X5 = rnorm(n = N, mean = 0, sd = 1)
> X = cbind(X1, X2, X3, X4, X5)
> colnames(X) = paste0("X", 1:5)
> 
> # generate continuous outcome variable
> calculateLink = function(X, treatment){
+ 
+     ((X[, 1] <= 0) & (X[, 2] <= 0)) *
+         (25 * (1 - treatment) + 8 * treatment) + 
+ 
+     ((X[, 1] <= 0) & (X[, 2] > 0)) *
+         (18 * (1 - treatment) + 20 * treatment) +
+ 
+     ((X[, 1] > 0) & (X[, 3] <= 0)) *
+         (20 * (1 - treatment) + 18 * treatment) + 
+ 
+     ((X[, 1] > 0) & (X[, 3] > 0)) *
+         (8 * (1 - treatment) + 25 * treatment)
+ }
> 
> Link = calculateLink(X, treatment)
> Y = rnorm(N, mean = Link, sd = 1)
> 
> # combine variables in a data frame
> data = data.frame(X, Y, treatment)
> 
> # fit a dipm classification tree 
> tree1 = dipm(Y ~ treatment | ., data, mtry = 1, maxdepth = 3)
Note that all candidate split variables are assumed to be ordinal.
DIPM Tree (Continuous Y, 2 treatments, yes mtry, ntree=100):
 node splitvar splitvar_name type    splitval lchild rchild depth nsubj besttrt
    1        1            X1  ord  0.05300423      2      3     1   100       0
    2        2            X2  ord -0.10097489      4      5     2    56       0
    3        3            X3  ord -0.06082195      6      7     2    44       1
    4       NA          <NA> <NA>          NA     NA     NA     3    32       0
    5       NA          <NA> <NA>          NA     NA     NA     3    24       1
    6       NA          <NA> <NA>          NA     NA     NA     3    20       0
    7       NA          <NA> <NA>          NA     NA     NA     3    24       1
> # predict optimal treatment for new subjects
> predict(tree1, newdata = head(data), 
+ FUN = function(n)  as.numeric(n$info$opt_trt))
1 2 3 4 5 6 
0 1 1 1 0 0 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("node_dipm")
> ### * node_dipm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: node_dipm
> ### Title: Panel-Generator for Visualization of A Precision Medicine Tree
> ### Aliases: node_dipm
> 
> ### ** Examples
> 
> 
> #' #
> # ... an example with a continuous outcome variable
> #     and two treatment groups
> #
> 
> N = 100
> set.seed(123)
> 
>
> # generate binary treatments
> treatment = rbinom(N, 1, 0.5)
> 
> # generate candidate split variables
> X1 = rnorm(n = N, mean = 0, sd = 1)
> X2 = rnorm(n = N, mean = 0, sd = 1)
> X3 = rnorm(n = N, mean = 0, sd = 1)
> X4 = rnorm(n = N, mean = 0, sd = 1)
> X5 = rnorm(n = N, mean = 0, sd = 1)
> X = cbind(X1, X2, X3, X4, X5)
> colnames(X) = paste0("X", 1:5)
> 
> # generate continuous outcome variable
> calculateLink = function(X, treatment){
+ 
+     ((X[, 1] <= 0) & (X[, 2] <= 0)) *
+         (25 * (1 - treatment) + 8 * treatment) + 
+ 
+     ((X[, 1] <= 0) & (X[, 2] > 0)) *
+         (18 * (1 - treatment) + 20 * treatment) +
+ 
+     ((X[,1 ] > 0) & (X[, 3] <= 0)) *
+         (20 * (1 - treatment) + 18 * treatment) + 
+ 
+     ((X[,1] > 0) & (X[,3] > 0)) *
+         (8 * (1 - treatment) + 25 * treatment)
+ }
> 
> Link = calculateLink(X, treatment)
> Y = rnorm(N, mean = Link, sd = 1)
> 
> # combine variables in a data frame
> data = data.frame(X, Y, treatment)
> 
> # fit a dipm classification tree
> tree = dipm(Y ~ treatment | ., data, mtry = 1, maxdepth = 3) 
Note that all candidate split variables are assumed to be ordinal.
DIPM Tree (Continuous Y, 2 treatments, yes mtry, ntree=100):
 node splitvar splitvar_name type    splitval lchild rchild depth nsubj besttrt
    1        1            X1  ord  0.05300423      2      3     1   100       0
    2        2            X2  ord -0.10097489      4      5     2    56       0
    3        3            X3  ord -0.06082195      6      7     2    44       1
    4       NA          <NA> <NA>          NA     NA     NA     3    32       0
    5       NA          <NA> <NA>          NA     NA     NA     3    24       1
    6       NA          <NA> <NA>          NA     NA     NA     3    20       0
    7       NA          <NA> <NA>          NA     NA     NA     3    24       1
> plot(tree, terminal_panel = node_dipm)
>             
> 
>                                     
> 
> 
> 
> cleanEx()
> nameEx("pmprune")
> ### * pmprune
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pmprune
> ### Title: Pruning A Precision Medicine Tree
> ### Aliases: pmprune
> 
> ### ** Examples
> 
> 
> #
> # ... an example with a continuous outcome variable
> #     and three treatment groups
> #
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("spmtree")
> ### * spmtree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spmtree
> ### Title: Simple Precision Medicine Tree
> ### Aliases: spmtree
> 
> ### ** Examples
> 
> 
> #
> # ... an example with a continuous outcome variable
> #     and two treatment groups
> #
> 
> N = 300
> set.seed(123)
>
>
> # generate binary treatments
> treatment = rbinom(N, 1, 0.5)
> 
> # generate candidate split variables
> X1 = rnorm(n = N, mean = 0, sd = 1)
> X2 = rnorm(n = N, mean = 0, sd = 1)
> X3 = rnorm(n = N, mean = 0, sd = 1)
> X4 = rnorm(n = N, mean = 0, sd = 1)
> X5 = rnorm(n = N, mean = 0, sd = 1)
> X = cbind(X1, X2, X3, X4, X5)
> colnames(X) = paste0("X", 1:5)
> 
> # generate continuous outcome variable
> calculateLink = function(X, treatment){
+ 
+     ((X[, 1] <= 0) & (X[, 2] <= 0)) *
+         (25 * (1 - treatment) + 8 * treatment) + 
+ 
+     ((X[, 1] <= 0) & (X[, 2] > 0)) *
+         (18 * (1 - treatment) + 20 * treatment) +
+ 
+     ((X[, 1] > 0) & (X[, 3] <= 0)) *
+         (20 * (1 - treatment) + 18 * treatment) + 
+ 
+     ((X[, 1] > 0) & (X[, 3] > 0)) *
+         (8 * (1 - treatment) + 25 * treatment)
+ }
> 
> Link = calculateLink(X, treatment)
> Y = rnorm(N, mean = Link, sd = 1)
> 
> # combine variables in a data frame
> data = data.frame(X, Y, treatment)
> 
> # fit a classification tree
> tree1 = spmtree(Y ~ treatment | ., data, maxdepth = 3)
Note that all candidate split variables are assumed to be ordinal.
SPM Tree (Continuous Y, 2 treatments):
 node splitvar splitvar_name type     splitval lchild rchild depth nsubj
    1        1            X1  ord -0.014307413      2      3     1   300
    2        2            X2  ord -0.016002527      4      5     2   148
    3        3            X3  ord -0.004060653      6      7     2   152
    4       NA          <NA> <NA>           NA     NA     NA     3    68
    5       NA          <NA> <NA>           NA     NA     NA     3    80
    6       NA          <NA> <NA>           NA     NA     NA     3    71
    7       NA          <NA> <NA>           NA     NA     NA     3    81
 besttrt
       1
       0
       1
       0
       1
       0
       1
> # predict optimal treatment for new subjects
> predict(tree1, newdata = head(data), 
+ FUN = function(n)  as.numeric(n$info$opt_trt))
1 2 3 4 5 6 
1 0 1 1 1 0 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.31 0.53 4.07 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
